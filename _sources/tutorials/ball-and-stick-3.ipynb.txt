{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ball and stick 3: Extensible network of cells"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the third part of a tutorial series where we build a multicompartment cell and evolve it into a network of cells running on a parallel machine. In this part, we take the functionality of the ring network we constructed in the previous page and encapsulate it into various classes so that the network is more extensible. We also begin parameterizing the model so that particular values are not hard-coded, but remain variable so that the model is flexible."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading libraries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As before, we will begin by loading relevant NEURON libraries:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-22T10:49:50.928619Z",
     "iopub.status.busy": "2024-03-22T10:49:50.928121Z",
     "iopub.status.idle": "2024-03-22T10:49:51.041488Z",
     "shell.execute_reply": "2024-03-22T10:49:51.040905Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from neuron import h, gui\n",
    "from neuron.units import ms, mV\n",
    "\n",
    "h.load_file(\"stdrun.hoc\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generic Cell class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the last tutorial, we created a generic `Cell` class (actually, two versions) but we can expand this to make it more powerful. For example, let's make each Cell record its spike times, some membrane potential timeseries, and keep track of NetCons."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-22T10:49:51.046926Z",
     "iopub.status.busy": "2024-03-22T10:49:51.045724Z",
     "iopub.status.idle": "2024-03-22T10:49:51.057806Z",
     "shell.execute_reply": "2024-03-22T10:49:51.057227Z"
    }
   },
   "outputs": [],
   "source": [
    "class Cell:\n",
    "    def __init__(self, gid, x, y, z, theta):\n",
    "        self._gid = gid\n",
    "        self._setup_morphology()\n",
    "        self.all = self.soma.wholetree()\n",
    "        self._setup_biophysics()\n",
    "        self.x = self.y = self.z = 0\n",
    "        h.define_shape()\n",
    "        self._rotate_z(theta)\n",
    "        self._set_position(x, y, z)\n",
    "\n",
    "        # everything below here in this method is NEW\n",
    "        self._spike_detector = h.NetCon(self.soma(0.5)._ref_v, None, sec=self.soma)\n",
    "        self.spike_times = h.Vector()\n",
    "        self._spike_detector.record(self.spike_times)\n",
    "\n",
    "        self._ncs = []\n",
    "\n",
    "        self.soma_v = h.Vector().record(self.soma(0.5)._ref_v)\n",
    "\n",
    "    def __repr__(self):\n",
    "        return \"{}[{}]\".format(self.name, self._gid)\n",
    "\n",
    "    def _set_position(self, x, y, z):\n",
    "        for sec in self.all:\n",
    "            for i in range(sec.n3d()):\n",
    "                sec.pt3dchange(\n",
    "                    i,\n",
    "                    x - self.x + sec.x3d(i),\n",
    "                    y - self.y + sec.y3d(i),\n",
    "                    z - self.z + sec.z3d(i),\n",
    "                    sec.diam3d(i),\n",
    "                )\n",
    "        self.x, self.y, self.z = x, y, z\n",
    "\n",
    "    def _rotate_z(self, theta):\n",
    "        \"\"\"Rotate the cell about the Z axis.\"\"\"\n",
    "        for sec in self.all:\n",
    "            for i in range(sec.n3d()):\n",
    "                x = sec.x3d(i)\n",
    "                y = sec.y3d(i)\n",
    "                c = h.cos(theta)\n",
    "                s = h.sin(theta)\n",
    "                xprime = x * c - y * s\n",
    "                yprime = x * s + y * c\n",
    "                sec.pt3dchange(i, xprime, yprime, sec.z3d(i), sec.diam3d(i))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since the `BallAndStick` has a simple geometry, we could modify it to assume that all inputs go into a single location; we will call it the `.syn`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-22T10:49:51.060294Z",
     "iopub.status.busy": "2024-03-22T10:49:51.060069Z",
     "iopub.status.idle": "2024-03-22T10:49:51.065181Z",
     "shell.execute_reply": "2024-03-22T10:49:51.064554Z"
    }
   },
   "outputs": [],
   "source": [
    "class BallAndStick(Cell):\n",
    "    name = \"BallAndStick\"\n",
    "\n",
    "    def _setup_morphology(self):\n",
    "        self.soma = h.Section(name=\"soma\", cell=self)\n",
    "        self.dend = h.Section(name=\"dend\", cell=self)\n",
    "        self.dend.connect(self.soma)\n",
    "        self.soma.L = self.soma.diam = 12.6157\n",
    "        self.dend.L = 200\n",
    "        self.dend.diam = 1\n",
    "\n",
    "    def _setup_biophysics(self):\n",
    "        for sec in self.all:\n",
    "            sec.Ra = 100  # Axial resistance in Ohm * cm\n",
    "            sec.cm = 1  # Membrane capacitance in micro Farads / cm^2\n",
    "        self.soma.insert(\"hh\")\n",
    "        for seg in self.soma:\n",
    "            seg.hh.gnabar = 0.12  # Sodium conductance in S/cm2\n",
    "            seg.hh.gkbar = 0.036  # Potassium conductance in S/cm2\n",
    "            seg.hh.gl = 0.0003  # Leak conductance in S/cm2\n",
    "            seg.hh.el = -54.3  # Reversal potential in mV\n",
    "        # Insert passive current in the dendrite\n",
    "        self.dend.insert(\"pas\")\n",
    "        for seg in self.dend:\n",
    "            seg.pas.g = 0.001  # Passive conductance in S/cm2\n",
    "            seg.pas.e = -65  # Leak reversal potential mV\n",
    "\n",
    "        # NEW: the synapse\n",
    "        self.syn = h.ExpSyn(self.dend(0.5))\n",
    "        self.syn.tau = 2 * ms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Due to the nature of `h.ExpSyn` decay, there is mathematically no difference between having two ExpSyn objects at the same point or one synapse where multiple inputs add linearly, so it suffices to have just the one as long as we're happy with all inputs going into `dend(0.5)`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Make a Ring class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Encapsulating code into discrete objects is not only conceptually useful for code management, but as we know with cell objects, it lets us make several instances of the object for use in a network. Thinking ahead, we may very well need several networks â€“ each network configured differently. This allows scripting of several simulations <i>en masse</i>, either in a for loop that sequentially processes the networks, or it can be used with NEURON's <a href=\"https://neuron.yale.edu/neuron/static/py_doc/modelspec/programmatic/network/parcon.html#ParallelContext.subworlds\">subworlds</a> architecture in a parallel context."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-22T10:49:51.067941Z",
     "iopub.status.busy": "2024-03-22T10:49:51.067553Z",
     "iopub.status.idle": "2024-03-22T10:49:51.074037Z",
     "shell.execute_reply": "2024-03-22T10:49:51.073474Z"
    }
   },
   "outputs": [],
   "source": [
    "class Ring:\n",
    "    \"\"\"A network of *N* ball-and-stick cells where cell n makes an\n",
    "    excitatory synapse onto cell n + 1 and the last, Nth cell in the\n",
    "    network projects to the first cell.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self, N=5, stim_w=0.04, stim_t=9, stim_delay=1, syn_w=0.01, syn_delay=5, r=50\n",
    "    ):\n",
    "        \"\"\"\n",
    "        :param N: Number of cells.\n",
    "        :param stim_w: Weight of the stimulus\n",
    "        :param stim_t: time of the stimulus (in ms)\n",
    "        :param stim_delay: delay of the stimulus (in ms)\n",
    "        :param syn_w: Synaptic weight\n",
    "        :param syn_delay: Delay of the synapse\n",
    "        :param r: radius of the network\n",
    "        \"\"\"\n",
    "        self._syn_w = syn_w\n",
    "        self._syn_delay = syn_delay\n",
    "        self._create_cells(N, r)\n",
    "        self._connect_cells()\n",
    "        # add stimulus\n",
    "        self._netstim = h.NetStim()\n",
    "        self._netstim.number = 1\n",
    "        self._netstim.start = stim_t\n",
    "        self._nc = h.NetCon(self._netstim, self.cells[0].syn)\n",
    "        self._nc.delay = stim_delay\n",
    "        self._nc.weight[0] = stim_w\n",
    "\n",
    "    def _create_cells(self, N, r):\n",
    "        self.cells = []\n",
    "        for i in range(N):\n",
    "            theta = i * 2 * h.PI / N\n",
    "            self.cells.append(\n",
    "                BallAndStick(i, h.cos(theta) * r, h.sin(theta) * r, 0, theta)\n",
    "            )\n",
    "\n",
    "    def _connect_cells(self):\n",
    "        for source, target in zip(self.cells, self.cells[1:] + [self.cells[0]]):\n",
    "            nc = h.NetCon(source.soma(0.5)._ref_v, target.syn, sec=source.soma)\n",
    "            nc.weight[0] = self._syn_w\n",
    "            nc.delay = self._syn_delay\n",
    "            source._ncs.append(nc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `_create_cells` method is basically the same as the `create_n_BallAndStick` function in the previous part of the tutorial; the only difference is that the cells are stored in `self._cells` instead of being returned. `_connect_cells` is shorter than the previous version because it can take advantage of the existing synapses and lists."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test the network"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's make a `Ring` object with 5 cells, render it using NEURON's built-in graphics, and run a simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-22T10:49:51.076563Z",
     "iopub.status.busy": "2024-03-22T10:49:51.076235Z",
     "iopub.status.idle": "2024-03-22T10:49:51.080203Z",
     "shell.execute_reply": "2024-03-22T10:49:51.079597Z"
    }
   },
   "outputs": [],
   "source": [
    "ring = Ring(N=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now to check that it is constructed correctly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-22T10:49:51.082511Z",
     "iopub.status.busy": "2024-03-22T10:49:51.082182Z",
     "iopub.status.idle": "2024-03-22T10:49:51.086003Z",
     "shell.execute_reply": "2024-03-22T10:49:51.085422Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shape_window = h.PlotShape(True)\n",
    "shape_window.show(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks good so far; let's run the simulation and record time:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-22T10:49:51.088369Z",
     "iopub.status.busy": "2024-03-22T10:49:51.088063Z",
     "iopub.status.idle": "2024-03-22T10:49:51.109162Z",
     "shell.execute_reply": "2024-03-22T10:49:51.108595Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t = h.Vector().record(h._ref_t)\n",
    "h.finitialize(-65 * mV)\n",
    "h.continuerun(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remember that if we are running in Jupyter to make a plot appear inline we must:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-22T10:49:51.111440Z",
     "iopub.status.busy": "2024-03-22T10:49:51.111253Z",
     "iopub.status.idle": "2024-03-22T10:49:51.382932Z",
     "shell.execute_reply": "2024-03-22T10:49:51.382347Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now plot the trace of cell 0's soma:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-22T10:49:51.386008Z",
     "iopub.status.busy": "2024-03-22T10:49:51.385614Z",
     "iopub.status.idle": "2024-03-22T10:49:51.505908Z",
     "shell.execute_reply": "2024-03-22T10:49:51.505366Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(t, list(ring.cells[0].soma_v))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cell 0 looks good. Let's look at the raster diagram:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-22T10:49:51.511466Z",
     "iopub.status.busy": "2024-03-22T10:49:51.511052Z",
     "iopub.status.idle": "2024-03-22T10:49:51.611478Z",
     "shell.execute_reply": "2024-03-22T10:49:51.610708Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhYAAAGdCAYAAABO2DpVAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAUg0lEQVR4nO3da4xUd93A8d/CwhTa3enFcpPFh3pDoJje0iBVq2AJIU0vpokNKtFXrYtCG7VF03pLXVrjC2sNxcbIC6nYJmJtH1uCrdA0FgQaFKShVDGsUkpiZGYL7dKy53nxPJ3HVWk78NvZHfh8kpMwM2f2/JL/kPnmzNmdlqIoigAASDBssAcAAE4ewgIASCMsAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASNPa6AP29fXFvn37oq2tLVpaWhp9eADgOBRFET09PTFhwoQYNuzY5yUaHhb79u2Ljo6ORh8WAEjQ3d0dEydOPObjDQ+Ltra2iPjfwdrb2xt9eADgOFSr1ejo6Ki9jx9Lw8Pi9Y8/2tvbhQUANJk3u4zBxZsAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphAQCkERYAQBphwSnl8JHX4r9u/e/4r1v/Ow4feW2wx4E35TVLsxEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAECausLi61//erS0tPTbpkyZMlCzAQBNprXeJ0ybNi1+/etf//8PaK37RwAAJ6m6q6C1tTXGjRs3ELMAAE2u7mssdu/eHRMmTIjzzjsvFixYEHv37n3D/Xt7e6NarfbbAICTU11hcemll8bKlSvjsccei+XLl8eePXvigx/8YPT09BzzOV1dXVEul2tbR0fHCQ8NAAxNdYXFvHnz4rrrrosZM2bE3Llz41e/+lUcPHgwHnjggWM+Z+nSpVGpVGpbd3f3CQ8NAAxNJ3Tl5Zlnnhnvec974vnnnz/mPqVSKUql0okcBgBoEif0dyxeeuml+NOf/hTjx4/PmgcAaGJ1hcUXv/jF2LBhQ/zlL3+J3/72t3HNNdfE8OHD4/rrrx+o+QCAJlLXRyF//etf4/rrr4+///3vce6558Zll10WGzdujHPPPXeg5gMAmkhdYbF69eqBmgMAOAn4rhAAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAIE1LURRFIw9YrVajXC5HpVKJ9vb2Rh6aQXL4yGsx9fa1ERGx85tzY/TI1kGeCN6c1y3NZqBfs2/1/dsZCwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANKcUFgsW7YsWlpaYsmSJUnjAADN7LjDYvPmzbFixYqYMWNG5jwAQBM7rrB46aWXYsGCBXHffffFWWedlT0TANCkjissOjs7Y/78+TFnzpw33be3tzeq1Wq/DQA4ObXW+4TVq1fHM888E5s3b35L+3d1dcU3vvGNugcDAJpPXWcsuru7Y/HixbFq1ao47bTT3tJzli5dGpVKpbZ1d3cf16AAwNBX1xmLrVu3xoEDB+LCCy+s3Xf06NF48skn45577one3t4YPnx4v+eUSqUolUo50wIAQ1pdYTF79uzYvn17v/s+85nPxJQpU+KWW275t6gAAE4tdYVFW1tbTJ8+vd99p59+epxzzjn/dj8AcOrxlzcBgDR1/1bIv1q/fn3CGADAycAZCwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgjbAAANIICwAgTUtRFEUjD1itVqNcLkelUon29vZGHvqUcvjIazH19rUREbHzm3Nj9MjWQZ4I3pzXLc3mVHrNvtX3b2csAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASCMsAIA0wgIASFNXWCxfvjxmzJgR7e3t0d7eHjNnzoxHH310oGYDAJpMXWExceLEWLZsWWzdujW2bNkSH/3oR+Oqq66KP/7xjwM1HwDQRFrr2fnKK6/sd/uOO+6I5cuXx8aNG2PatGmpgwEAzaeusPhnR48ejQcffDAOHToUM2fOPOZ+vb290dvbW7tdrVaP95AAwBBX98Wb27dvjzPOOCNKpVLccMMNsWbNmpg6deox9+/q6opyuVzbOjo6TmhgAGDoqjss3vve98a2bdti06ZNceONN8bChQtj586dx9x/6dKlUalUalt3d/cJDQwADF11fxQycuTIeNe73hURERdddFFs3rw5vve978WKFSv+4/6lUilKpdKJTQkANIUT/jsWfX19/a6hAABOXXWdsVi6dGnMmzcvJk2aFD09PXH//ffH+vXrY+3atQM1HwDQROoKiwMHDsSnP/3peOGFF6JcLseMGTNi7dq18bGPfWyg5gMAmkhdYfGjH/1ooOYAAE4CvisEAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEgjLACANMICAEjTUhRF0cgDVqvVKJfLUalUor29vZGHbojDR16LqbevjYiInd+cG6NHtg7yRPDGvGZpRl63jfdW37+dsQAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0ggLACCNsAAA0tQVFl1dXXHJJZdEW1tbjBkzJq6++urYtWvXQM0GADSZusJiw4YN0dnZGRs3box169bFq6++GldccUUcOnRooOYDAJpIaz07P/bYY/1ur1y5MsaMGRNbt26ND33oQ6mDAQDNp66w+FeVSiUiIs4+++xj7tPb2xu9vb2129Vq9UQOCQAMYcd98WZfX18s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iIj9+/fHyJEj48wzz+y379ixY2P//v2DMOWpbfXq1fHMM8/E5s2b/+0xazV0/PnPf47ly5fHzTffHF/5yldi8+bN8YUvfCFGjhwZCxcurK3H2LFj+z3PWjXerbfeGtVqNaZMmRLDhw+Po0ePxh133BELFiyIiLBWJwFhMYg6Oztjx44d8dRTTw32KPwH3d3dsXjx4li3bl2cdtppgz0Ob6Cvry8uvvji+Pa3vx0RERdccEHs2LEj7r333li4cOEgT8c/e+CBB2LVqlVx//33x7Rp02Lbtm2xZMmSmDBhgrU6SfgoZJAsWrQoHnnkkfjNb37T72vkx40bF0eOHImDBw/22//FF1+McePGNXjKU9vWrVvjwIEDceGFF0Zra2u0trbGhg0b4u67747W1tYYO3astRoixo8fH1OnTu133/ve977Yu3dvRERtPf71N3asVeN96UtfiltvvTU+8YlPxPnnnx+f+tSn4qabboqurq6IsFYnA2HRYEVRxKJFi2LNmjXxxBNPxOTJk/s9ftFFF8WIESPi8ccfr923a9eu2Lt3b8ycObPR457SZs+eHdu3b49t27bVtosvvjgWLFhQ+7e1GhpmzZr1b7+2/dxzz8U73vGOiIiYPHlyjBs3rt9aVavV2LRpk7VqsMOHD8ewYf3feoYPHx59fX0RYa1OCoN99eip5sYbbyzK5XKxfv364oUXXqhthw8fru1zww03FJMmTSqeeOKJYsuWLcXMmTOLmTNnDuLUvO6ffyukKKzVUPG73/2uaG1tLe64445i9+7dxapVq4rRo0cXP/nJT2r7LFu2rDjzzDOLhx56qPjDH/5QXHXVVcXkyZOLl19+eRAnP/UsXLiwePvb31488sgjxZ49e4qf//znxdve9rbiy1/+cm0fa9XchEWDRcR/3H784x/X9nn55ZeLz33uc8VZZ51VjB49urjmmmuKF154YfCGpuZfw8JaDR0PP/xwMX369KJUKhVTpkwpfvjDH/Z7vK+vr7jtttuKsWPHFqVSqZg9e3axa9euQZr21FWtVovFixcXkyZNKk477bTivPPOK7761a8Wvb29tX2sVXPztekAQBrXWAAAaYQFAJBGWAAAaYQFAJBGWAAAaYQFAJBGWAAAaYQFAJBGWAAAaYQFAJBGWAAAaYQFAJDmfwDt25zrK47SXQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "for i, cell in enumerate(ring.cells):\n",
    "    plt.vlines(list(cell.spike_times), i + 0.5, i + 1.5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explore effects of parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's compare two simulations: one with the same parameters as above, which we'll plot in black, and one with half the synaptic weight, which we'll plot in red:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-03-22T10:49:51.614562Z",
     "iopub.status.busy": "2024-03-22T10:49:51.614074Z",
     "iopub.status.idle": "2024-03-22T10:49:51.766085Z",
     "shell.execute_reply": "2024-03-22T10:49:51.765558Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiAAAAGdCAYAAAArNcgqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAWoElEQVR4nO3dfWzdZfn48etshTK6tWPInlxHhqITxggwQuZQUSa6EMKDMXGZuiCJAYtuEBWmwYcY7MBIIkIGEiN/CE5JHMgSIBPYFiKb22DKUwbolMoYS8C13QEqrvfvj2l/VBjfnrW9urWvV/JJds65z/lc5P6wvnN61lZKKSUAABKNGuoBAICRR4AAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOnqsk/Y3d0dO3bsiHHjxkWlUsk+PQBwAEop0dnZGVOnTo1Ro/r//kV6gOzYsSOam5uzTwsADIC2traYNm1av18nPUDGjRsXEfv+AxobG7NPDwAcgI6Ojmhubu75Ot5f6QHy32+7NDY2ChAAOMQM1McnfAgVAEgnQACAdAIEAEgnQACAdAIEAEgnQACAdAIEAEgnQACAdAIEAEgnQACAdAIEAEgnQACAdAIEAEgnQBgRqtVqVCqVqFQqUa1W+/qkiEpl39HX50A/HdC1OjAndr2TSoAAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOkECACQToAAAOlqCpDvfe97UalUeh0zZ84crNkAgGGqrtYnnHjiifH73//+/79AXc0vAQCMcDXXQ11dXUyePHkwZgEARoiaPwPy3HPPxdSpU+O4446LRYsWxQsvvPCu67u6uqKjo6PXAQCMbDUFyBlnnBG333573H///bFixYrYvn17fOQjH4nOzs79Pqe1tTWampp6jubm5n4PDQAc2iqllHKgT969e3cce+yxccMNN8Qll1zyjmu6urqiq6ur53ZHR0c0NzdHe3t7NDY2HuipoSbVajXGjh0bERF79uyJhoaGvjwp4j/PiT17IvryHOinA7pWB+bErnfeVUdHRzQ1NQ3Y1+9+fYJ0/Pjx8YEPfCCe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tbU1Tj/99Bg3blxMnDgxLrjggti2bdtgzQYADFM1Bci6deuipaUlNmzYEGvWrIk333wzzjnnnKhWq4M1HwAwDNXVsvj+++/vdfv222+PiRMnxpYtW+KjH/3ogA4GAAxfNQXI/2pvb4+IiAkTJux3TVdXV3R1dfXc7ujo6M8pAYBh4IA/hNrd3R1Lly6NefPmxaxZs/a7rrW1NZqamnqO5ubmAz0lADBMHHCAtLS0xJNPPhkrV65813XLli2L9vb2nqOtre1ATwkADBMH9C2Yyy+/PFavXh3r16+PadOmveva+vr6qK+vP6DhAIDhqaYAKaXEV7/61Vi1alWsXbs2ZsyYMVhzAQDDWE0B0tLSEnfeeWfcc889MW7cuNi5c2dERDQ1NcWYMWMGZUAAYPip6TMgK1asiPb29jjrrLNiypQpPcevf/3rwZoPABiGav4WDABAf/ldMABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQbFgFS3bUrolKJqFT2/XmINDQ0RCklSinR0NAQ0dAQUcq+o6FhyObi4FGtVqNSqUSlUolqtXqgL9JzvccBvsbbrtX+cq0POwNyrQ6Ahogo/zkOmivL9T4ghkWAAACHFgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAOgECAKQTIABAupoDZP369XHeeefF1KlTo1KpxN133z0IYwEAw1nNAVKtVuPkk0+Om2++eTDmAQBGgLpan7BgwYJYsGDBYMwCAIwQNQdIrbq6uqKrq6vndkdHx2CfEgA4yA36h1BbW1ujqamp52hubh7sUwIAB7lBD5Bly5ZFe3t7z9HW1jbYpwQADnKD/i2Y+vr6qK+vH+zTAACHED8HBABIV/M7IHv27Innn3++5/b27dtj69atMWHChJg+ffqADgcADE81B8jmzZvj4x//eM/tK6+8MiIiFi9eHLfffvuADQYADF81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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "for syn_w, color in [(0.01, \"black\"), (0.005, \"red\")]:\n",
    "    ring = Ring(N=5, syn_w=syn_w)\n",
    "    h.finitialize(-65 * mV)\n",
    "    h.continuerun(100 * ms)\n",
    "    for i, cell in enumerate(ring.cells):\n",
    "        plt.vlines(list(cell.spike_times), i + 0.5, i + 1.5, color=color)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In both simulations, the first spike occurs at 10.925 ms. After that, the red spikes lag the black ones by steadily increasing amounts."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next part of the tutorial will translate this serial model into a parallel model. That part will not work in Jupyter and must be run from a terminal."
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
